import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { PlusIcon } from "lucide-react";
import { Dialog, DialogContent, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import HabitForm from "@/components/habits/HabitForm";
import { Habit } from "@shared/schema";
import { Skeleton } from "@/components/ui/skeleton";

interface HabitTrackerProps {
  habits?: Habit[];
}

export default function HabitTracker({ habits }: HabitTrackerProps) {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [habitFormOpen, setHabitFormOpen] = useState(false);

  const toggleHabitMutation = useMutation({
    mutationFn: async ({ habitId, completed }: { habitId: number, completed: boolean }) => {
      return await apiRequest("PATCH", `/api/habits/${habitId}`, { completed });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/habits'] });
      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });
    },
    onError: (error) => {
      toast({
        title: "Failed to update habit",
        description: error.message,
        variant: "destructive",
      });
    }
  });

  const incrementHabitMutation = useMutation({
    mutationFn: async ({ habitId, value }: { habitId: number, value: number }) => {
      return await apiRequest("POST", `/api/habits/${habitId}/increment`, { value });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/habits'] });
      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });
    },
    onError: (error) => {
      toast({
        title: "Failed to increment habit",
        description: error.message,
        variant: "destructive",
      });
    }
  });

  const handleToggleHabit = (habitId: number, currentStatus: boolean) => {
    toggleHabitMutation.mutate({ habitId, completed: !currentStatus });
  };

  const handleIncrementHabit = (habitId: number) => {
    incrementHabitMutation.mutate({ habitId, value: 1 });
  };

  const completedCount = habits?.filter(h => h.completed).length || 0;
  const totalCount = habits?.length || 0;

  return (
    <Card className="mb-6">
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <CardTitle className="text-lg font-semibold">Today's Habits</CardTitle>
        <div className="flex items-center">
          <span className="text-sm text-neutral-600 mr-2">
            {completedCount} of {totalCount} completed
          </span>
          <a href="/habits" className="text-primary text-sm font-medium hover:underline">Manage</a>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {!habits && (
            Array(3).fill(0).map((_, i) => (
              <div key={i} className="p-3 border border-neutral-200 rounded-lg">
                <div className="flex items-center">
                  <Skeleton className="h-6 w-6 rounded-full mr-3" />
                  <div className="flex-1">
                    <Skeleton className="h-5 w-3/4 mb-2" />
                    <Skeleton className="h-2 w-full mb-1" />
                    <Skeleton className="h-4 w-1/4" />
                  </div>
                </div>
              </div>
            ))
          )}

          {habits && habits.length > 0 && habits.map((habit) => (
            <div key={habit.id} className="flex items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50">
              <div className="mr-3">
                <button 
                  className={`w-6 h-6 rounded-full border-2 ${
                    habit.completed 
                      ? 'border-secondary flex items-center justify-center text-white bg-secondary' 
                      : 'border-primary'
                  }`}
                  onClick={() => handleToggleHabit(habit.id, habit.completed)}
                >
                  {habit.completed && <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="20 6 9 17 4 12" /></svg>}
                </button>
              </div>
              <div className="flex-1">
                <div className="flex items-center">
                  <h3 className="font-medium text-neutral-800">{habit.name}</h3>
                  {habit.streak > 0 && (
                    <span className="ml-2 text-xs py-1 px-2 bg-secondary-light bg-opacity-20 text-secondary rounded-full">
                      {habit.streak} day streak
                    </span>
                  )}
                </div>
                
                {habit.targetValue > 0 && (
                  <>
                    <Progress 
                      className="h-1.5 mt-1" 
                      value={(habit.currentValue / habit.targetValue) * 100} 
                    />
                    <div className="mt-1 flex justify-between text-xs text-neutral-500">
                      <span>{habit.currentValue}/{habit.targetValue} {habit.units}</span>
                      <span>{Math.round((habit.currentValue / habit.targetValue) * 100)}%</span>
                    </div>
                  </>
                )}
                
                {!habit.targetValue && (
                  <p className="text-sm text-neutral-500">{habit.description || 'No description'}</p>
                )}
              </div>
              
              {habit.targetValue > 0 && habit.currentValue < habit.targetValue && (
                <div className="ml-4">
                  <Button 
                    variant="ghost" 
                    size="icon" 
                    onClick={() => handleIncrementHabit(habit.id)}
                    className="text-neutral-400 hover:text-primary"
                  >
                    <PlusIcon className="h-5 w-5" />
                  </Button>
                </div>
              )}
            </div>
          ))}
          
          {habits && habits.length === 0 && (
            <div className="text-center py-4 text-neutral-500">
              No habits added yet. Create your first habit to start tracking!
            </div>
          )}
          
          <Dialog open={habitFormOpen} onOpenChange={setHabitFormOpen}>
            <DialogTrigger asChild>
              <button className="w-full py-3 border border-dashed border-neutral-300 rounded-lg text-neutral-500 hover:text-primary hover:border-primary flex items-center justify-center">
                <PlusIcon className="h-4 w-4 mr-1" /> Add New Habit
              </button>
            </DialogTrigger>
            <DialogContent>
              <DialogTitle>Create New Habit</DialogTitle>
              <HabitForm onComplete={() => {
                setHabitFormOpen(false);
                toast({
                  title: "Habit created",
                  description: "Your new habit has been added successfully.",
                });
              }} />
            </DialogContent>
          </Dialog>
        </div>
      </CardContent>
    </Card>
  );
}
