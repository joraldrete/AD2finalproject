import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { moodOptions } from "@shared/schema";

interface MoodTrackerProps {
  currentMood?: string;
}

export default function MoodTracker({ currentMood }: MoodTrackerProps) {
  const [selectedMood, setSelectedMood] = useState(currentMood || "");
  const [notes, setNotes] = useState("");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const saveMoodMutation = useMutation({
    mutationFn: async (data: { mood: string, emoji: string, notes: string }) => {
      return await apiRequest("POST", "/api/moods", data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/moods/today'] });
      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });
      toast({
        title: "Mood saved",
        description: "Your mood has been recorded for today.",
      });
      setNotes("");
    },
    onError: (error) => {
      toast({
        title: "Failed to save mood",
        description: error.message,
        variant: "destructive",
      });
    }
  });

  const handleSaveMood = () => {
    if (!selectedMood) {
      toast({
        title: "No mood selected",
        description: "Please select a mood before saving.",
        variant: "destructive",
      });
      return;
    }

    const selectedMoodOption = moodOptions.find(m => m.value === selectedMood);
    if (selectedMoodOption) {
      saveMoodMutation.mutate({
        mood: selectedMoodOption.value,
        emoji: selectedMoodOption.emoji,
        notes: notes
      });
    }
  };

  return (
    <Card className="mb-6">
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <CardTitle className="text-lg font-semibold">Today's Mood</CardTitle>
        <a href="/mood" className="text-primary text-sm font-medium hover:underline">View Journal</a>
      </CardHeader>
      <CardContent>
        <p className="text-neutral-600 mb-4">How are you feeling today?</p>
        
        <div className="grid grid-cols-5 gap-2 mb-6">
          {moodOptions.map((mood) => (
            <div 
              key={mood.value}
              className={`flex flex-col items-center p-2 rounded-lg cursor-pointer transition-all hover:translate-y-[-5px] ${
                selectedMood === mood.value ? 'bg-primary-light bg-opacity-20 translate-y-[-5px]' : 'hover:bg-neutral-50'
              }`}
              onClick={() => setSelectedMood(mood.value)}
            >
              <div className="text-3xl mb-1">{mood.emoji}</div>
              <span className="text-xs text-neutral-600">{mood.label}</span>
            </div>
          ))}
        </div>
        
        <div className="mb-4">
          <label htmlFor="moodNote" className="block text-sm font-medium text-neutral-700 mb-1">
            Add a note (optional)
          </label>
          <Textarea
            id="moodNote"
            placeholder="How's your day going? What's on your mind?"
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            className="w-full resize-none"
            rows={2}
          />
        </div>
        
        <div className="flex justify-end">
          <Button 
            onClick={handleSaveMood} 
            disabled={saveMoodMutation.isPending}
            className="bg-primary hover:bg-primary-dark"
          >
            {saveMoodMutation.isPending ? "Saving..." : "Save Mood"}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
